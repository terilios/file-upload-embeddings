# Stage 1: Build numpy
FROM python:3.10-slim-bullseye as builder

# Configure apt to retry downloads and use a reliable mirror
RUN echo 'Acquire::Retries "3";' > /etc/apt/apt.conf.d/80retries && \
    echo "deb http://ftp.us.debian.org/debian/ bullseye main" > /etc/apt/sources.list && \
    echo "deb http://security.debian.org/debian-security bullseye-security main" >> /etc/apt/sources.list && \
    echo "deb http://ftp.us.debian.org/debian/ bullseye-updates main" >> /etc/apt/sources.list

# Install build dependencies
RUN apt-get update && \
    apt-get install -y \
    build-essential \
    python3-dev \
    python3-pip \
    python3-setuptools \
    python3-wheel \
    gcc \
    g++ \
    libblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    pkg-config \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# Install numpy
RUN pip install --no-cache-dir wheel setuptools && \
    pip install --no-cache-dir numpy==1.24.3

# Stage 2: Final image
FROM python:3.10-slim-bullseye

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies including OCR and PDF processing tools
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    libmagic-dev \
    poppler-utils \
    tesseract-ocr \
    tesseract-ocr-eng \
    libtesseract-dev \
    ghostscript \
    python3-pip \
    python3-setuptools \
    libblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    gfortran \
    # Image processing
    libsm6 \
    libxext6 \
    libxrender-dev \
    # Additional utilities
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Copy numpy from builder stage
COPY --from=builder /usr/local/lib/python3.10/site-packages/numpy* /usr/local/lib/python3.10/site-packages/

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Download spaCy model
RUN python -m spacy download en_core_web_sm

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/temp

# Set permissions
RUN chmod -R 755 /app/logs /app/uploads /app/temp

# Add wait-for-it script to wait for database
COPY scripts/wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh

# Expose port
EXPOSE 8000

# Run the application with database initialization
CMD ["/bin/bash", "-c", "/wait-for-it.sh postgres:5432 -- python scripts/setup_db.py && uvicorn app.backend.main:app --host 0.0.0.0 --port 8000 --reload"]
